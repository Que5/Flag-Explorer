name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Show initial workspace content
        run: ls -la

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies for Cairo, PyGObject, Systemd, and D-Bus
        run: |
          sudo apt-get update
          sudo apt-get install -y libgirepository1.0-dev libcairo2-dev pkg-config libsystemd-dev libdbus-1-dev

      - name: Install backend dependencies
        run: |
          set -x
          cd backend
          ls -l requirements.txt
          pip install -r requirements.txt || exit 1

      - name: Run backend tests
        run: |
          set -x
          cd backend/flag_explorer
          mkdir -p test-results
          ls -l manage.py
          export DJANGO_SETTINGS_MODULE=flag_explorer.settings
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          python -m pytest --junitxml=test-results/backend-test-results.xml || exit 1

      - name: Verify backend files for packaging
        run: |
          cd backend
          ls -la requirements.txt
          ls -la flag_explorer/
          cd flag_explorer
          ls -la manage.py api/

      - name: Package backend
        run: |
          set -x
          cd backend
          if [ -f "requirements.txt" ] && [ -d "flag_explorer" ]; then
            echo "Attempting to create tar archive..."
            tar -czvf backend-package.tar.gz requirements.txt flag_explorer/
            TAR_EXIT_CODE=$? # Capture exit code of tar command
            echo "Tar command exit code: $TAR_EXIT_CODE"

            if [ $TAR_EXIT_CODE -ne 0 ]; then
              echo "::error::Tar command failed with exit code $TAR_EXIT_CODE. Cannot package backend."
              exit 1 # Explicitly fail the step if tar failed
            fi

            echo "Verifying tar archive creation..."
            ls -l backend-package.tar.gz
            LS_EXIT_CODE=$? # Capture exit code of ls command
            echo "Ls command exit code: $LS_EXIT_CODE"

            if [ $LS_EXIT_CODE -ne 0 ]; then
              echo "::error::'ls -l' failed to find the created archive. Packaging error."
              exit 1 # Explicitly fail the step if ls failed
            fi
            echo "Backend packaging appears successful."
          else
            echo "::error::Missing requirements.txt or flag_explorer/ directory. Cannot package backend."
            exit 1
          fi

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-package
          path: backend/backend-package.tar.gz

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' 

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          set -x # Enable verbose output for debugging
          cd frontend
          mkdir -p test-results
          # Execute Vitest, ensuring it runs once (--run) and outputs JUnit XML
          # The --outputFile specifies where the JUnit report should be saved
          npm test -- --run --reporter=junit --outputFile=test-results/frontend-test-results.xml || exit 1

      - name: Build frontend
        run: |
          cd frontend
          # Your package.json defines "build": "tsc -b && vite build",
          # which is perfectly handled by "npm run build"
          npm run build || exit 1

      - name: Verify frontend build contents
        run: |
          set -x # Enable verbose output for debugging
          cd frontend
          ls -la dist/ # Vite defaults to 'dist', confirm its contents
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "Build directory 'dist/' exists and is not empty."
          else
            echo "::error::Build directory 'dist/' not found or is empty after 'npm run build'. Cannot package frontend."
            exit 1
          fi

      - name: Package frontend
        run: |
          set -x # Enable verbose output for debugging
          cd frontend

          # Check if 'dist' directory exists
          if [ ! -d "dist" ]; then
            echo "::error::'dist/' directory not found. Cannot package frontend."
            exit 1
          fi

          # Attempt to create the tar archive
          echo "Attempting to create frontend-build.tar.gz from dist/..."
          tar -czvf frontend-build.tar.gz dist/
          TAR_EXIT_CODE=$? # Capture exit code of tar command

          if [ $TAR_EXIT_CODE -ne 0 ]; then
            echo "::error::Tar command failed with exit code $TAR_EXIT_CODE. Cannot package frontend."
            exit 1 # Explicitly fail the step if tar failed
          fi
          echo "Tar archive created successfully."

          # Verify the tar archive was created and exists
          ls -l frontend-build.tar.gz
          LS_EXIT_CODE=$? # Capture exit code of ls command

          if [ $LS_EXIT_CODE -ne 0 ]; then
            echo "::error::'ls -l' failed to find the created archive. Packaging error."
            exit 1 # Explicitly fail the step if ls failed
          fi
          echo "Frontend packaging appears successful."

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/frontend-build.tar.gz
